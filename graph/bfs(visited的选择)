class Solution {
public:
    bool hasPath(vector<vector<int>>& maze, vector<int>& start, vector<int>& destination) {
        int m=maze.size();
        int n=maze[0].size();
        vector<vector<int>> visited(m,vector<int>(n,0));
        
        return bfs(maze,visited,0,start,destination)||
            bfs(maze,visited,1,start,destination)||
            bfs(maze,visited,2,start,destination)||
            bfs(maze,visited,3,start,destination);
    }
    
    bool bfs(vector<vector<int>> &maze,vector<vector<int>>& visited,int dir,vector<int> start,vector<int> end){
        int x=start[0];
        int y=start[1];
        visited[x][y]=1;
            
        int dx[4]={1,-1,0,0};
        int dy[4]={0,0,1,-1};
        while(!(x<0||x>=maze.size()||y<0||y>=maze[0].size()||maze[x][y]==1)){
            x=x+dx[dir];
            y=y+dy[dir];
        }
        x=x-dx[dir];
        y=y-dy[dir];
        
        if(visited[x][y]==1) return false;
        if(x==end[0]&&y==end[1]) return true;
        start[0]=x;
        start[1]=y;
        return bfs(maze,visited,(dir+1)%4,start,end)||bfs(maze,visited,(dir+2)%4,start,end)
            ||bfs(maze,visited,(dir+3)%4,start,end);
    }
};
