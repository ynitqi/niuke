class Solution {
    vector<vector<int>> ma;
public:
    int shortestDistance(vector<vector<int>>& grid) {
        int m=grid.size();
        if(m==0) return -1;
        int n=grid[0].size();
        

        vector<vector<int>> dt(m,vector<int>(n,0));
        ma.resize(m,vector<int>(n,0));
        int count=0;
        for(int i=0;i<m;++i){
            for(int j=0;j<n;++j){
                if(grid[i][j]==1){
                    BFS(grid,dt,i,j);
                    ++count;            //对应每次遍历
                }
            }
        }
        
        
        int res=~(1<<31);
        for(int i=0;i<m;++i){
            for(int j=0;j<n;++j){
                if(ma[i][j]==count){    //对应每次遍历
                   res=min(res,dt[i][j]);
                }
            }
        }
        if(res==~(1<<31)) return -1;
        else return res;
    }
    
    
    void BFS(vector<vector<int>> grid,vector<vector<int>>& dt,int x,int y){
        queue<int*> q;   
        int m=grid.size();
        int n=grid[0].size();


        q.push(new int[2]{x,y});
        int dx[4]={1,-1,0,0};
        int dy[4]={0,0,1,-1};
        while(!q.empty()){
            int *temp=q.front();
            int row=temp[0];
            int col=temp[1];
            for(int i=0;i<4;++i){
                int x1=row+dx[i];
                int y1=col+dy[i];
                if(x1<0||x1>=m||y1<0||y1>=n||grid[x1][y1]!=0) continue;
                q.push(new int[2]{x1,y1});
                grid[x1][y1]=grid[row][col]+1;
                ++ma[x1][y1];       //对应每次遍历
                dt[x1][y1]+=grid[x1][y1]-1;
            }

            q.pop();
        }


    }
};
