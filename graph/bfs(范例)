class Solution {
public:
    void wallsAndGates(vector<vector<int>>& rooms) {
        const int kr=(1<<31)-1;
        int m=rooms.size();
        if(m==0) return;
        int n=rooms[0].size();
        
        for(int i=0;i<rooms.size();++i){
            for(int j=0;j<rooms[i].size();++j){
                if(rooms[i][j]==kr){
                    BFS(rooms,i*rooms[i].size()+j);
                }
            }
        }
    }
    
    void BFS(vector<vector<int>> &rooms,int fr){
        int m=rooms.size();
        int n=rooms[0].size();
        vector<vector<int>> path(m,vector<int>(n,-1));
        
        queue<int> q;
        vector<int> ma(m*n,0);
        
        q.push(fr);
        ma[fr]++;
        while(!q.empty()){
            int temp=q.front();
            int x=temp/n;
            int y=temp%n;
            
            if(rooms[x][y]==0){
                findpath(rooms,path,x,y);
                return;
            }
            
            int dx[4]={1,-1,0,0};
            int dy[4]={0,0,1,-1};
            for(int i=0;i<4;++i){
                int x1=x+dx[i];
                int y1=y+dy[i];
                if(x1>=0&&x1<m&&y1>=0&&y1<n&&rooms[x1][y1]!=-1){
                    if(ma[x1*n+y1]++==0){
                        q.push(x1*n+y1);
                        path[x1][y1]=i;
                    }
                }
            }
            
            q.pop();
        }
    }
    
    void findpath(vector<vector<int>> &rooms,vector<vector<int>> path,int x,int y){
        int res=0;
        int dx[4]={1,-1,0,0};
        int dy[4]={0,0,1,-1};

        while(path[x][y]!=-1){
            int temp=path[x][y];
            x=x-dx[temp];
            y=y-dy[temp];
            ++res;
            rooms[x][y]=res;
        }
        
    }
};



